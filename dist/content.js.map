{"version":3,"file":"content.js","sources":["../src/ad-skipper.ts","../src/content.ts"],"sourcesContent":["/**\n * YouTube Tab-Fullscreen Extension - Ad Skipper Module\n * Premium Feature - Auto-skip YouTube ads\n */\n\n// Ad-related constants\nconst AD_SKIP_SELECTORS = [\n  '.ytp-skip-ad-button',           // Main skip button\n  '.ytp-ad-skip-button',           // Alternative skip button\n  '.ytp-ad-skip-button-modern',    // Modern variant\n  '.videoAdUiSkipButton',          // Legacy selector\n  'button[id^=\"skip-button:\"]'     // ID-based selector for current structure\n];\n\nconst AD_DETECTION_SELECTORS = [\n  '.ytp-skip-ad',                  // Skip ad container\n  '.ytp-skip-ad-button__text',     // Skip button text\n  '.ytp-ad-text',                  // Ad text indicator\n  '.ytp-ad-overlay-container',     // Ad overlay\n  '.ytp-ad-player-overlay',        // Ad player overlay\n  'div[id^=\"skip-ad:\"]'           // ID-based ad container detection\n];\n\n/**\n * PremiumManager - Handles premium feature access\n */\nexport namespace PremiumManager {\n  export function isPremium(): boolean {\n    // TODO: Implement actual premium check\n    // For now, return true for development\n    return true;\n  }\n\n  export function showUpgradePrompt(): void {\n    console.log('[YT-TabFS] Premium feature - upgrade required');\n    // TODO: Show upgrade prompt UI\n  }\n\n  export function startAlways(): void {\n    console.log('[YT-TabFS] Premium feature - starting always');\n    AdSkipper.start();\n  }\n}\n\n/**\n * AdSkipperDebug - Debug utilities for ad skipper\n */\nexport namespace AdSkipperDebug {\n  export function startAlways(): void {\n    console.log('[YT-TabFS] DEBUG: Starting ad skipper in always-on mode');\n    AdSkipper.start();\n  }\n\n  export function logAdElements(): void {\n    console.log('[YT-TabFS] DEBUG: Checking for ad elements...');\n    \n    // Check all detection selectors\n    AD_DETECTION_SELECTORS.forEach(selector => {\n      const element = document.querySelector(selector);\n      if (element) {\n        console.log(`[YT-TabFS] DEBUG: Found ad element: ${selector}`, element);\n      }\n    });\n\n    // Check all skip button selectors\n    AD_SKIP_SELECTORS.forEach(selector => {\n      const element = document.querySelector(selector);\n      if (element) {\n        const style = window.getComputedStyle(element);\n        console.log(`[YT-TabFS] DEBUG: Found skip button: ${selector}, opacity: ${style.opacity}`, element);\n      }\n    });\n\n    // Check video element\n    const video = document.querySelector('video');\n    if (video) {\n      console.log(`[YT-TabFS] DEBUG: Video element found, playbackRate: ${video.playbackRate}`);\n    }\n  }\n}\n\n/**\n * AdSkipper - Premium feature for auto-skipping YouTube ads\n */\nexport namespace AdSkipper {\n  let isActive = false;\n  let adCheckInterval: number | null = null;\n  let skipAttemptCount = 0;\n  let lastSkipAttempt = 0;\n  let originalPlaybackRate = 1;\n  \n  // Constants for skip attempt management\n  const MAX_SKIP_ATTEMPTS = 5;\n  const SKIP_COOLDOWN_MS = 10000; // 10 seconds\n\n  export function start(): void {\n    if (!PremiumManager.isPremium()) {\n      PremiumManager.startAlways();\n    }\n    \n    if (isActive) return;\n    \n    console.log('[YT-TabFS] Starting ad skipper with proven method');\n    isActive = true;\n    \n    startAdMonitoring();\n  }\n\n  export function stop(): void {\n    if (!isActive) return;\n    \n    console.log('[YT-TabFS] Stopping ad skipper');\n    isActive = false;\n    \n    if (adCheckInterval) {\n      clearInterval(adCheckInterval);\n      adCheckInterval = null;\n    }\n    \n    // Restore normal playback speed if needed\n    const video = document.querySelector('video') as HTMLVideoElement;\n    if (video) {\n      restoreNormalSpeed(video);\n    }\n  }\n\n  function startAdMonitoring(): void {\n    if (!isActive) return;\n    \n    console.log('[YT-TabFS] Starting ad monitoring with 500ms interval (proven method)');\n    \n    // Use the proven 500ms interval approach\n    adCheckInterval = window.setInterval(() => {\n      if (isActive) {\n        skipAd();\n      }\n    }, 500);\n    \n    // Also try immediately\n    skipAd();\n  }\n\n  function skipAd(): void {\n    if (!isActive) return;\n    \n    // Check if we're in YouTube Shorts (skip ads don't work there)\n    if (window.location.pathname.startsWith('/shorts/')) {\n      return;\n    }\n    \n    // Primary ad detection: look for .ad-showing class (most reliable)\n    const adShowing = document.querySelector('.ad-showing');\n    \n    // Also check for timed pie countdown ads and survey questions\n    const pieCountdown = document.querySelector('.ytp-ad-timed-pie-countdown-container');\n    const surveyQuestions = document.querySelector('.ytp-ad-survey-questions');\n    \n    // If no ads detected, restore normal speed and return\n    if (!adShowing && !pieCountdown && !surveyQuestions) {\n      const video = document.querySelector('video') as HTMLVideoElement;\n      if (video) {\n        restoreNormalSpeed(video);\n      }\n      \n      // Reset counters when no ads\n      if (skipAttemptCount > 0) {\n        skipAttemptCount = 0;\n      }\n      return;\n    }\n    \n    console.log('[YT-TabFS] Ad detected, attempting to skip');\n    \n    // Throttle skip attempts\n    const now = Date.now();\n    if (now - lastSkipAttempt < 2000) return; // Wait 2 seconds between attempts\n    \n    skipAttemptCount++;\n    if (skipAttemptCount > MAX_SKIP_ATTEMPTS) {\n      const timeSinceLastAttempt = now - lastSkipAttempt;\n      if (timeSinceLastAttempt < SKIP_COOLDOWN_MS) {\n        return; // Still in cooldown\n      } else {\n        skipAttemptCount = 0; // Reset counter after cooldown\n      }\n    }\n    \n    lastSkipAttempt = now;\n    \n    // Find the player element\n    let playerEl: any = null;\n    let player: any = null;\n    \n    // Try different player selectors\n    playerEl = document.querySelector('#movie_player') || document.querySelector('#ytd-player');\n    \n    if (!playerEl) {\n      console.log('[YT-TabFS] Player element not found');\n      return;\n    }\n    \n    // Get the player object\n    if (playerEl.getPlayer && typeof playerEl.getPlayer === 'function') {\n      player = playerEl.getPlayer();\n    } else {\n      player = playerEl;\n    }\n    \n    if (!player) {\n      console.log('[YT-TabFS] Player object not found');\n      return;\n    }\n    \n    // Method 1: For pie countdown and survey ads, use player reload method\n    if (pieCountdown || surveyQuestions) {\n      console.log('[YT-TabFS] Skipping pie countdown or survey ad using player reload');\n      reloadVideoAtCurrentTime(player, playerEl);\n      return;\n    }\n    \n    // Method 2: For regular video ads, try video seeking first\n    if (adShowing) {\n      const adVideo = document.querySelector('video.html5-main-video') as HTMLVideoElement;\n      \n      if (adVideo && adVideo.src && !adVideo.paused && !isNaN(adVideo.duration)) {\n        console.log('[YT-TabFS] Ad video found, seeking to end');\n        \n        // For YouTube Music, seek to end\n        if (window.location.hostname === 'music.youtube.com') {\n          adVideo.currentTime = adVideo.duration;\n          console.log('[YT-TabFS] YouTube Music ad skipped by seeking to end');\n          skipAttemptCount = 0; // Reset on success\n          return;\n        }\n        \n        // For regular YouTube, try seeking first, then reload if needed\n        const originalTime = adVideo.currentTime;\n        adVideo.currentTime = adVideo.duration;\n        \n        // Check if seeking worked after a short delay\n        setTimeout(() => {\n          if (document.querySelector('.ad-showing')) {\n            console.log('[YT-TabFS] Seeking failed, using player reload method');\n            reloadVideoAtCurrentTime(player, playerEl);\n          } else {\n            console.log('[YT-TabFS] Ad skipped successfully by seeking');\n            skipAttemptCount = 0; // Reset on success\n          }\n        }, 1000);\n        \n      } else {\n        // No video element or not ready, use player reload\n        console.log('[YT-TabFS] No ad video element, using player reload method');\n        reloadVideoAtCurrentTime(player, playerEl);\n      }\n    }\n  }\n\n  function reloadVideoAtCurrentTime(player: any, playerEl: any): void {\n    try {\n      // Get current video data\n      if (!player.getVideoData || typeof player.getVideoData !== 'function') {\n        console.log('[YT-TabFS] getVideoData not available');\n        return;\n      }\n      \n      const videoData = player.getVideoData();\n      if (!videoData || !videoData.video_id) {\n        console.log('[YT-TabFS] No video data available');\n        return;\n      }\n      \n      const videoId = videoData.video_id;\n      const start = Math.floor(player.getCurrentTime ? player.getCurrentTime() : 0);\n      \n      console.log(`[YT-TabFS] Reloading video ${videoId} at ${start}s`);\n      \n      // Use the proven reload method\n      if (playerEl.loadVideoWithPlayerVars && typeof playerEl.loadVideoWithPlayerVars === 'function') {\n        playerEl.loadVideoWithPlayerVars({ videoId, start });\n      } else if (playerEl.loadVideoByPlayerVars && typeof playerEl.loadVideoByPlayerVars === 'function') {\n        playerEl.loadVideoByPlayerVars({ videoId, start });\n      } else if (player.loadVideoById && typeof player.loadVideoById === 'function') {\n        player.loadVideoById(videoId, start);\n      } else {\n        console.log('[YT-TabFS] No suitable reload method found');\n        return;\n      }\n      \n      console.log('[YT-TabFS] Ad skipped using player reload method');\n      skipAttemptCount = 0; // Reset on success\n      \n    } catch (error) {\n      console.log('[YT-TabFS] Player reload failed:', error);\n      \n      // Fallback: speed up the ad\n      const video = document.querySelector('video') as HTMLVideoElement;\n      if (video) {\n        speedUpAd(video);\n      }\n    }\n  }\n\n  function speedUpAd(video: HTMLVideoElement): void {\n    // Capture current playback rate before changing it\n    if (video.playbackRate !== 16) {\n      originalPlaybackRate = video.playbackRate;\n      video.playbackRate = 16;\n      console.log(`[YT-TabFS] Speeding up ad from ${originalPlaybackRate}x to 16x`);\n    }\n  }\n\n  function restoreNormalSpeed(video: HTMLVideoElement): void {\n    if (video.playbackRate !== originalPlaybackRate) {\n      video.playbackRate = originalPlaybackRate;\n      console.log(`[YT-TabFS] Restored normal playback speed to ${originalPlaybackRate}x`);\n    }\n  }\n\n  export function isRunning(): boolean {\n    return isActive;\n  }\n} ","/**\n * YouTube Tab-Fullscreen Extension - Content Script\n * Version 1.0.0 - Free Core\n */\n\nimport { AdSkipper, AdSkipperDebug } from './ad-skipper';\n\n// Constants\nconst STORAGE_KEY = 'ytTabFS';\nconst CSS_CLASS = 'yt-tabfs-enabled';\nconst BUTTON_ID = 'yt-tabfs-button';\n\n/**\n * StateManager - Handles per-tab memory using sessionStorage\n */\nnamespace StateManager {\n  export function load(): boolean {\n    try {\n      return sessionStorage.getItem(STORAGE_KEY) === '1';\n    } catch {\n      return false;\n    }\n  }\n\n  export function save(isEnabled: boolean): void {\n    try {\n      if (isEnabled) {\n        sessionStorage.setItem(STORAGE_KEY, '1');\n      } else {\n        sessionStorage.removeItem(STORAGE_KEY);\n      }\n    } catch {\n      // Ignore storage errors\n    }\n  }\n\n  export function getState(): boolean {\n    return load();\n  }\n\n  export function setState(isEnabled: boolean): void {\n    save(isEnabled);\n  }\n}\n\n/**\n * DOMOverlay - Manages the tab-fullscreen CSS class\n */\nnamespace DOMOverlay {\n  export function enable(): void {\n    console.log('[YT-TabFS] DOMOverlay.enable() called, current path:', window.location.pathname);\n    document.documentElement.classList.add(CSS_CLASS);\n    console.log('[YT-TabFS] Added yt-tabfs-enabled class to html element');\n    \n    // Ad skipper runs by default, so no need to start it here\n    console.log('[YT-TabFS] Tab-fullscreen enabled, ad skipper continues running');\n  }\n\n  export function disable(): void {\n    console.log('[YT-TabFS] DOMOverlay.disable() called, current path:', window.location.pathname);\n    document.documentElement.classList.remove(CSS_CLASS);\n    console.log('[YT-TabFS] Removed yt-tabfs-enabled class from html element');\n    \n    // Keep ad skipper running even when tab-fullscreen is disabled\n    console.log('[YT-TabFS] Tab-fullscreen disabled, but ad skipper continues running');\n  }\n\n  export function isEnabled(): boolean {\n    return document.documentElement.classList.contains(CSS_CLASS);\n  }\n}\n\n/**\n * ToggleButton - Creates and manages the tab-fullscreen button\n */\nnamespace ToggleButton {\n  let button: HTMLElement | null = null;\n\n  export function cleanup(): void {\n    // Remove any existing buttons from DOM\n    const existingButtons = document.querySelectorAll(`#${BUTTON_ID}`);\n    existingButtons.forEach(btn => {\n      console.log('[YT-TabFS] Removing existing button from DOM');\n      btn.remove();\n    });\n    button = null;\n  }\n\n  export function create(): HTMLElement {\n    // Always cleanup before creating new button\n    cleanup();\n    \n    const btn = document.createElement('button');\n    btn.id = BUTTON_ID;\n    btn.className = 'ytp-button';\n    btn.setAttribute('aria-label', 'Tab Fullscreen');\n    btn.setAttribute('title', 'Tab Fullscreen (Alt+T) | Auto Ad-Skip Always On');\n    btn.setAttribute('data-tooltip-opaque', 'false');\n    \n    // Create SVG icon that clearly shows tab-fullscreen concept\n    btn.innerHTML = `\n      <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" style=\"pointer-events: none; width: 24px; height: 24px;\">\n        <!-- Tab bar (browser chrome) -->\n        <rect x=\"6\" y=\"2.5\" width=\"12\" height=\"2\" rx=\"1\" ry=\"1\" fill=\"currentColor\" stroke=\"none\"/>\n        <!-- Video frame -->\n        <rect x=\"3\" y=\"5\" width=\"18\" height=\"16\" rx=\"2\" ry=\"2\"/>\n        <!-- Up arrow -->\n        <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"6.2\"/>\n        <polyline points=\"10.7,7.5 12,6 13.3,7.5\"/>\n        <!-- Down arrow -->\n        <line x1=\"12\" y1=\"14.8\" x2=\"12\" y2=\"17.6\"/>\n        <polyline points=\"10.7,16.3 12,17.8 13.3,16.3\"/>\n        <!-- Left arrow -->\n        <line x1=\"7.2\" y1=\"12\" x2=\"4.4\" y2=\"12\"/>\n        <polyline points=\"5.9,10.7 4.4,12 5.9,13.3\"/>\n        <!-- Right arrow -->\n        <line x1=\"16.8\" y1=\"12\" x2=\"19.6\" y2=\"12\"/>\n        <polyline points=\"18.1,10.7 19.6,12 18.1,13.3\"/>\n      </svg>\n    `;\n\n    btn.addEventListener('click', handleClick);\n    button = btn;\n    return btn;\n  }\n\n  function handleClick(event: Event): void {\n    event.preventDefault();\n    event.stopPropagation();\n    \n    console.log('[YT-TabFS] Button clicked');\n    const currentState = StateManager.getState();\n    console.log('[YT-TabFS] Current state before toggle:', currentState);\n    \n    const newState = !currentState;\n    console.log('[YT-TabFS] New state after toggle:', newState);\n    \n    if (newState) {\n      console.log('[YT-TabFS] Enabling tab-fullscreen');\n      DOMOverlay.enable();\n    } else {\n      console.log('[YT-TabFS] Disabling tab-fullscreen');\n      DOMOverlay.disable();\n    }\n    \n    StateManager.setState(newState);\n    updateButtonState(newState);\n  }\n\n  export function updateButtonState(isEnabled: boolean): void {\n    console.log('[YT-TabFS] Updating button state to:', isEnabled);\n    if (button) {\n      if (isEnabled) {\n        button.classList.add('active');\n        button.setAttribute('aria-pressed', 'true');\n      } else {\n        button.classList.remove('active');\n        button.setAttribute('aria-pressed', 'false');\n      }\n    }\n  }\n\n  export function getButton(): HTMLElement | null {\n    return button;\n  }\n}\n\n/**\n * UIInjector - Handles injecting the button into YouTube's controls\n */\nnamespace UIInjector {\n  let injected = false;\n\n  export function inject(): boolean {\n    // Check if button actually exists in DOM (not just our flag)\n    const existingButton = document.getElementById(BUTTON_ID);\n    if (injected && existingButton) {\n      console.log('[YT-TabFS] Already injected and button exists in DOM, skipping');\n      return true;\n    }\n\n    // If our flag says injected but button doesn't exist, reset the flag\n    if (injected && !existingButton) {\n      console.log('[YT-TabFS] Injection flag set but button missing from DOM, resetting');\n      injected = false;\n    }\n\n    const controlsContainer = document.querySelector('.ytp-chrome-controls .ytp-left-controls');\n    if (!controlsContainer) {\n      console.log('[YT-TabFS] Looking for controls container: false');\n      return false;\n    }\n\n    console.log('[YT-TabFS] Looking for controls container: true');\n    \n    // Clean up any existing buttons before creating new one\n    ToggleButton.cleanup();\n\n    const button = ToggleButton.create();\n    const initialState = StateManager.getState();\n    ToggleButton.updateButtonState(initialState);\n    \n    controlsContainer.appendChild(button);\n    console.log('[YT-TabFS] Button inserted into controls');\n    console.log('[YT-TabFS] Initial state from storage:', initialState);\n    \n    // Start ad skipper by default (always enabled)\n    console.log('[YT-TabFS] Starting ad skipper by default');\n    AdSkipper.start();\n    \n    // If we're already in fullscreen mode, keep ad skipper running\n    if (initialState) {\n      console.log('[YT-TabFS] Tab-fullscreen already enabled, ad skipper continues running');\n    }\n    \n    injected = true;\n    return true;\n  }\n\n  export function reset(): void {\n    console.log('[YT-TabFS] UIInjector reset called');\n    ToggleButton.cleanup();\n    injected = false;\n  }\n}\n\n/**\n * ObserverGuard - Manages DOM observation for SPA navigation\n */\nnamespace ObserverGuard {\n  let observer: MutationObserver | null = null;\n  let currentPath: string = '';\n  let currentUrl: string = '';\n  let debounceTimer: number | null = null;\n\n  function debounceNavigationHandler(callback: () => void, delay: number = 200): void {\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n    debounceTimer = window.setTimeout(callback, delay);\n  }\n\n  export function start(): void {\n    if (observer) return;\n\n    // Track initial path and full URL\n    currentPath = window.location.pathname;\n    currentUrl = window.location.href;\n\n    observer = new MutationObserver(() => {\n      const newPath = window.location.pathname;\n      const newUrl = window.location.href;\n      \n      // Check if navigation occurred (either path change or URL change)\n      if (newPath !== currentPath || newUrl !== currentUrl) {\n        console.log('[YT-TabFS] Navigation detected:', currentUrl, '->', newUrl);\n        currentPath = newPath;\n        currentUrl = newUrl;\n        \n        if (newPath.includes('/watch')) {\n          // User navigated to a video page (or between videos)\n          // Use debounced handler to prevent multiple rapid injections\n          debounceNavigationHandler(() => {\n            console.log('[YT-TabFS] Processing video navigation');\n            UIInjector.reset();\n            initOnce().catch(err => console.error('[YT-TabFS] Error in initOnce:', err));\n          }, 150);\n        } else {\n          // User navigated away from video page (e.g., to homepage)\n          // Automatically disable tab-fullscreen to prevent UI elements from being hidden\n          if (StateManager.getState()) {\n            console.log('[YT-TabFS] Auto-disabling tab-fullscreen on navigation away from video');\n            DOMOverlay.disable();\n            StateManager.setState(false);\n            // Update button state if it exists\n            const button = ToggleButton.getButton();\n            if (button) {\n              ToggleButton.updateButtonState(false);\n            }\n          }\n          // Reset injection flag so button can be re-injected on next video\n          UIInjector.reset();\n        }\n      } else if (newPath.includes('/watch')) {\n        // Still on video page, but check if button still exists in DOM\n        // This handles cases where YouTube rebuilds the player without URL change\n        const existingButton = document.getElementById(BUTTON_ID);\n        if (!existingButton) {\n          console.log('[YT-TabFS] Button missing from DOM, re-injecting');\n          debounceNavigationHandler(() => {\n            UIInjector.reset();\n            initOnce().catch(err => console.error('[YT-TabFS] Error in initOnce:', err));\n          }, 150);\n        }\n      }\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  export function stop(): void {\n    if (observer) {\n      observer.disconnect();\n      observer = null;\n    }\n  }\n}\n\n/**\n * EventBridge - Handles keyboard shortcuts\n */\nnamespace EventBridge {\n  function handleToggle(): void {\n    console.log('[YT-TabFS] Toggle triggered');\n    \n    // Check if we're on a video page\n    if (!window.location.pathname.includes('/watch')) {\n      console.log('[YT-TabFS] Not on video page, ignoring toggle command');\n      return;\n    }\n    \n    const button = ToggleButton.getButton();\n    if (button) {\n      console.log('[YT-TabFS] Button found, clicking');\n      button.click();\n    } else {\n      console.log('[YT-TabFS] Button not found, trying to inject');\n      // Try to inject the button first\n      if (UIInjector.inject()) {\n        const newButton = ToggleButton.getButton();\n        if (newButton) {\n          console.log('[YT-TabFS] Button injected and clicked');\n          newButton.click();\n        } else {\n          console.log('[YT-TabFS] Failed to get button after injection');\n        }\n      } else {\n        console.log('[YT-TabFS] Failed to inject button');\n      }\n    }\n  }\n\n  export function init(): void {\n    // Listen for messages from background script\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n      console.log('[YT-TabFS] Message received:', message);\n      \n      if (message.action === 'toggle-tabfs') {\n        handleToggle();\n        sendResponse({ success: true });\n      }\n      \n      // Return true to indicate we'll send a response asynchronously\n      return true;\n    });\n\n    // Fallback: Direct keyboard listener as backup\n    document.addEventListener('keydown', (event: KeyboardEvent) => {\n      // Check for Alt+T\n      if (event.altKey && event.key.toLowerCase() === 't') {\n        // Prevent default behavior\n        event.preventDefault();\n        event.stopPropagation();\n        \n        console.log('[YT-TabFS] Direct Alt+T keydown detected');\n        handleToggle();\n      }\n    }, true); // Use capture phase to catch it early\n\n    console.log('[YT-TabFS] EventBridge initialized with both message listener and direct keyboard fallback');\n  }\n}\n\n/**\n * VideoPlayerWaiter - Waits for YouTube video player to be ready\n */\nnamespace VideoPlayerWaiter {\n  export function waitForPlayer(): Promise<boolean> {\n    return new Promise((resolve) => {\n      let attempts = 0;\n      const maxAttempts = 50; // 5 seconds max wait\n      const interval = 100; // Check every 100ms\n\n      const checkPlayer = () => {\n        const controlsContainer = document.querySelector('.ytp-chrome-controls .ytp-left-controls');\n        const player = document.querySelector('#movie_player');\n        \n        if (controlsContainer && player) {\n          console.log('[YT-TabFS] Video player is ready');\n          resolve(true);\n          return;\n        }\n        \n        attempts++;\n        if (attempts >= maxAttempts) {\n          console.log('[YT-TabFS] Video player wait timeout');\n          resolve(false);\n          return;\n        }\n        \n        setTimeout(checkPlayer, interval);\n      };\n      \n      checkPlayer();\n    });\n  }\n}\n\n/**\n * Main initialization function\n */\nasync function initOnce(): Promise<void> {\n  console.log('[YT-TabFS] initOnce called, pathname:', window.location.pathname);\n  \n  // Only inject on video pages\n  if (!window.location.pathname.includes('/watch')) {\n    console.log('[YT-TabFS] Not on video page, skipping injection');\n    return;\n  }\n  \n  // Wait for YouTube player to be ready\n  console.log('[YT-TabFS] Waiting for video player to be ready...');\n  const playerReady = await VideoPlayerWaiter.waitForPlayer();\n  \n  if (!playerReady) {\n    console.log('[YT-TabFS] Video player not ready, retrying later');\n    // Retry after a delay\n    setTimeout(() => initOnce(), 1000);\n    return;\n  }\n  \n  if (UIInjector.inject()) {\n    console.log('[YT-TabFS] Successfully injected button');\n    \n    // Restore state if tab-fullscreen was previously enabled\n    const savedState = StateManager.getState();\n    if (savedState) {\n      console.log('[YT-TabFS] Restoring tab-fullscreen state from storage');\n      DOMOverlay.enable();\n      ToggleButton.updateButtonState(true);\n    }\n  }\n}\n\n/**\n * Cleanup function to ensure proper state on page load\n */\nfunction ensureCleanState(): void {\n  // If we're not on a video page but tab-fullscreen is enabled, disable it\n  if (!window.location.pathname.includes('/watch') && DOMOverlay.isEnabled()) {\n    console.log('[YT-TabFS] Cleaning up stale tab-fullscreen state on non-video page');\n    DOMOverlay.disable();\n    StateManager.setState(false);\n  }\n}\n\n/**\n * InitialLoadHandler - Handles proper initialization on first page load\n */\nnamespace InitialLoadHandler {\n  let retryCount = 0;\n  const maxRetries = 10;\n  \n  export function handleInitialLoad(): void {\n    if (!window.location.pathname.includes('/watch')) {\n      return;\n    }\n    \n    initOnce()\n      .then(() => {\n        console.log('[YT-TabFS] Initial load completed successfully');\n        retryCount = 0; // Reset retry count on success\n      })\n      .catch((err) => {\n        console.error('[YT-TabFS] Error in initial initOnce:', err);\n        \n        // Retry with exponential backoff\n        if (retryCount < maxRetries) {\n          retryCount++;\n          const delay = Math.min(1000 * Math.pow(2, retryCount - 1), 5000); // Max 5 seconds\n          console.log(`[YT-TabFS] Retrying initial load in ${delay}ms (attempt ${retryCount}/${maxRetries})`);\n          setTimeout(() => handleInitialLoad(), delay);\n        } else {\n          console.error('[YT-TabFS] Max retries reached for initial load');\n        }\n      });\n  }\n}\n\n/**\n * Entry point\n */\nfunction init(): void {\n  // Clean up any stale state first\n  ensureCleanState();\n  \n  // Handle initial load with retry mechanism\n  InitialLoadHandler.handleInitialLoad();\n  \n  ObserverGuard.start();\n  EventBridge.init();\n}\n\n// Start the extension\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', init);\n} else {\n  init();\n}\n\n// Expose debug functions globally for testing\n(window as any).ytTabFSDebug = {\n  logAdElements: () => AdSkipperDebug.logAdElements(),\n  isAdSkipperRunning: () => AdSkipper.isRunning(),\n  stopAdSkipper: () => AdSkipper.stop(),\n  startAdSkipper: () => AdSkipper.start() // In case user wants to restart it\n}; "],"names":[],"mappings":"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"}